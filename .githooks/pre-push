#!/bin/bash
# ───────────────────────────────────────────────
# 📄 VALIDACIÓN DE DOCUMENTACIÓN PHPDOC
# ───────────────────────────────────────────────
echo "🔍 Iniciando validación PHPDoc con PHPCS..."
echo "📅 Fecha: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
echo "👤 Usuario: $(git config user.name)"

# Obtener el hash del último commit local y remoto
local_commit=$(git rev-parse HEAD)
remote_commit=$(git rev-parse @{u} 2>/dev/null || git hash-object -t tree /dev/null)

# Obtener archivos PHP modificados
FILES=$(git diff --name-only $remote_commit $local_commit | grep -E '\.php$')

# Si no hay archivos PHP modificados, no hacemos nada
if [ -z "$FILES" ]; then
    echo "✅ No hay archivos PHP modificados para validar."
    exit 0
fi

ERROR=0

for FILE in $FILES; do
    if git show $local_commit:"$FILE" > /dev/null 2>&1; then
        echo "📂 Validando $FILE ..."
        echo "───────────────────────────────────────────────"
        
        # Crear archivo temporal
        TEMP_FILE=$(mktemp)
        
        # Obtener el contenido actual del archivo
        CONTENT=$(git show $local_commit:"$FILE")
        
        # Obtener las líneas modificadas usando git diff
        DIFF_OUTPUT=$(git diff -U0 $remote_commit $local_commit -- "$FILE")
        
        # Procesar cada hunk del diff
        while IFS= read -r line; do
            if [[ $line =~ ^@@ ]]; then
                if [[ $line =~ \+([0-9]+) ]]; then
                    start_line="${BASH_REMATCH[1]}"
                    
                    # Buscar el inicio de la función/método y su docblock
                    func_start=$start_line
                    while [ $func_start -gt 1 ]; do
                        prev_line=$(echo "$CONTENT" | sed "${func_start}q;d")
                        if [[ $prev_line =~ ^\s*(/\*\*) ]]; then
                            break
                        fi
                        func_start=$((func_start - 1))
                    done
                    
                    # Buscar el final de la función
                    func_end=$start_line
                    total_lines=$(echo "$CONTENT" | wc -l)
                    while [ $func_end -le $total_lines ]; do
                        next_line=$(echo "$CONTENT" | sed "${func_end}q;d")
                        if [[ $next_line =~ ^\s*} ]]; then
                            func_end=$((func_end + 1))
                            break
                        fi
                        func_end=$((func_end + 1))
                    done
                    
                    # Extraer el bloque completo
                    echo "<?php" > "$TEMP_FILE"
                    echo "$CONTENT" | sed -n "${func_start},${func_end}p" >> "$TEMP_FILE"
                    
                    echo "Validando bloque en $FILE (líneas $func_start-$func_end):"
                    echo "───────────────────────────────────────────────"
                    cat "$TEMP_FILE"
                    echo "───────────────────────────────────────────────"
                    
                    # Ejecutar phpcs
                    if vendor/bin/phpcs --standard=phpcs.xml "$TEMP_FILE" 2>/dev/null; then
                        echo "✅ Bloque validado correctamente"
                    else
                        echo "❌ Error en la documentación del bloque"
                        ERROR=1
                        break 2  # Salir de ambos bucles si hay error
                    fi
                fi
            fi
        done <<< "$DIFF_OUTPUT"
        
        rm -f "$TEMP_FILE"
    fi
done

if [ $ERROR -ne 0 ]; then
    echo "❌ Se encontraron errores en la documentación PHPDoc. Por favor, corrige los problemas antes de hacer push."
    exit 1
fi

echo "✅ Validación exitosa. Continuando con el push."
exit 0