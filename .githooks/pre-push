#!/bin/bash

set -o pipefail  # Fallar si un comando dentro de un pipe falla

# Crear directorios temporales para almacenar errores y limpiar al terminar
TEMP_DIR=$(mktemp -d)
ERROR_FILE=$(mktemp)
ERROR_OCCURRED=false

cleanup() {
    echo "üßπ Limpiando archivos temporales..."
    rm -rf "$TEMP_DIR" "$ERROR_FILE"
}
trap cleanup EXIT

log_error() {
    local message="$1"
    echo "‚ùå [Error] $message" | tee -a "$ERROR_FILE"
    ERROR_OCCURRED=true
}

# Comienzo de la validaci√≥n
echo "üîç [Inicio] Iniciando validaci√≥n PHPDoc con PHPCS..."
echo "üìÖ [Fecha] $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
echo "üë§ [Usuario] $(git config user.name)"

# Obtener el hash del √∫ltimo commit local y remoto
echo "üîç [Commits] Obteniendo commits locales y remotos..."
local_commit=$(git rev-parse HEAD) || log_error "No se pudo obtener el commit local"
remote_commit=$(git rev-parse @{u} 2>/dev/null || git hash-object -t tree /dev/null) || log_error "No se pudo obtener el commit remoto"

echo "üîç [Commits] Commit local: ${local_commit:-<no disponible>}"
echo "üîç [Commits] Commit remoto: ${remote_commit:-<no disponible>}"

# Procesar archivos modificados
echo "üîç [Archivos] Analizando archivos modificados..."
files=$(git diff --name-only "$remote_commit" "$local_commit" | grep -E '\.php$') || true

if [ -z "$files" ]; then
    echo "‚ÑπÔ∏è [Info] No se encontraron archivos PHP modificados. Saliendo del hook."
    exit 0
fi

echo "üîç [Archivos] Archivos encontrados:"
echo "$files"

# Procesar cada archivo PHP modificado
echo "$files" | while read -r file; do
    echo "üìÇ [Archivo] Procesando: $file"

    if [ ! -f "$file" ]; then
        echo "‚ÑπÔ∏è [Info] Archivo eliminado o no encontrado: $file. Ignorando..."
        continue
    fi

    echo "üîç [Contenido] Obteniendo contenido de $file..."
    content=$(git show "$local_commit":"$file") || { log_error "No se pudo obtener contenido de $file"; continue; }
    echo "‚úÖ [Contenido] Contenido del archivo obtenido con √©xito."

    echo "üîç [L√≠neas] Obteniendo l√≠neas modificadas en $file..."
    hunks=$(git diff -U0 "$remote_commit" "$local_commit" -- "$file" | grep -E '^@@') || { log_error "No se encontraron l√≠neas modificadas en $file"; continue; }
    echo "‚úÖ [L√≠neas] L√≠neas modificadas obtenidas con √©xito."

    echo "üîç [Hunks] Procesando l√≠neas modificadas en $file..."
    echo "$hunks" | while read -r hunk; do
        if [[ $hunk =~ \+([0-9]+)(,[0-9]+)? ]]; then
            modified_line=${BASH_REMATCH[1]}
            echo "üîç [Hunk] Analizando l√≠nea modificada: $modified_line en $file"
        else
            log_error "No se pudo analizar el hunk: $hunk en $file"
        fi
    done
done

# Verificar errores globales
if [ "$ERROR_OCCURRED" = true ]; then
    echo "‚ùå [Error Global] Se encontraron errores durante la ejecuci√≥n del hook."
    echo "‚ÑπÔ∏è [Detalles del Error]:"
    cat "$ERROR_FILE"
    exit 1
fi

echo "‚úÖ [√âxito] Validaci√≥n completada. Continuando con el push."
exit 0