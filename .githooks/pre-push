#!/bin/bash
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìÑ VALIDACI√ìN DE DOCUMENTACI√ìN PHPDOC
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# Habilitar modo debug para ver exactamente qu√© est√° pasando
set -x

# Funci√≥n para logging
log_message() {
    echo "[$(date -u +"%Y-%m-%d %H:%M:%S UTC")] $1"
}

# Funci√≥n para salir con error
exit_with_error() {
    log_message "‚ùå $1"
    exit 1
}

# Capturar errores y mostrar mensaje
trap 'exit_with_error "El script fall√≥ en la l√≠nea $LINENO"' ERR

log_message "üîç Iniciando validaci√≥n PHPDoc con PHPCS..."
log_message "üë§ Usuario: $(git config user.name)"

# Obtener commits para comparaci√≥n
local_commit=$(git rev-parse HEAD) || exit_with_error "No se pudo obtener el commit local"
remote_commit=$(git rev-parse @{u} 2>/dev/null || git hash-object -t tree /dev/null)

# Directorio temporal con cleanup autom√°tico
TEMP_DIR=$(mktemp -d) || exit_with_error "No se pudo crear directorio temporal"
trap 'rm -rf "$TEMP_DIR"' EXIT

# Funci√≥n para encontrar los l√≠mites exactos de una funci√≥n
get_function_bounds() {
    local file=$1
    local target_line=$2
    local content="$3"
    
    log_message "Buscando l√≠mites de funci√≥n cerca de la l√≠nea $target_line"
    
    # Buscar hacia arriba hasta encontrar el inicio de la funci√≥n
    local start=$target_line
    while [ $start -gt 1 ]; do
        local line=$(echo "$content" | sed "${start}q;d")
        if [[ $line =~ ^[[:space:]]*(public|private|protected|function)[[:space:]]+ ]]; then
            break
        fi
        start=$((start - 1))
    done
    
    # Buscar hacia abajo hasta encontrar el final de la funci√≥n
    local end=$target_line
    local bracket_count=0
    
    while IFS= read -r line; do
        if [[ $line =~ \{ ]]; then
            ((bracket_count++))
        fi
        if [[ $line =~ \} ]]; then
            ((bracket_count--))
            if [ $bracket_count -eq 0 ]; then
                break
            fi
        fi
        ((end++))
    done < <(echo "$content" | tail -n +$target_line)
    
    log_message "Funci√≥n encontrada entre las l√≠neas $start y $end"
    echo "$start $end"
}

# Funci√≥n para validar una funci√≥n espec√≠fica
validate_function() {
    local file=$1
    local start_line=$2
    local end_line=$3
    local temp_file="$TEMP_DIR/temp_func.php"
    
    log_message "Validando funci√≥n en $file (l√≠neas $start_line-$end_line)"
    
    # Crear archivo temporal con la funci√≥n
    echo "<?php" > "$temp_file"
    git show "$local_commit:$file" | sed -n "${start_line},${end_line}p" >> "$temp_file"
    
    echo "Contenido a validar:"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    cat "$temp_file"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    
    # Ejecutar phpcs con salida detallada
    phpcs_output=$(vendor/bin/phpcs --standard=phpcs.xml "$temp_file" 2>&1)
    phpcs_status=$?
    
    # Siempre mostrar la salida de phpcs
    echo "$phpcs_output"
    
    if [ $phpcs_status -ne 0 ]; then
        log_message "‚ùå Error en la documentaci√≥n de la funci√≥n"
        echo "La funci√≥n necesita:"
        echo "  - Documentaci√≥n PHPDoc completa"
        echo "  - @return con el tipo de retorno"
        echo "  - Descripci√≥n clara de la funci√≥n"
        return 1
    fi
    
    return 0
}

# Procesar cada archivo PHP modificado
has_errors=0

git diff --name-only "$remote_commit" "$local_commit" | while read -r file; do
    if [[ ! $file =~ \.php$ ]]; then
        continue
    fi
    
    log_message "üìÇ Analizando $file"
    
    # Obtener el contenido actual del archivo
    content=$(git show "$local_commit:$file")
    
    # Procesar cada hunk modificado
    git diff -U0 "$remote_commit" "$local_commit" -- "$file" | grep -E '^@@' | while read -r hunk; do
        if [[ $hunk =~ \+([0-9]+)(,[0-9]+)? ]]; then
            modified_line="${BASH_REMATCH[1]}"
            
            log_message "Encontrada modificaci√≥n en l√≠nea $modified_line"
            
            # Obtener los l√≠mites de la funci√≥n
            read start_line end_line < <(get_function_bounds "$file" "$modified_line" "$content")
            
            if ! validate_function "$file" "$start_line" "$end_line"; then
                has_errors=1
                log_message "‚ùå Error en la funci√≥n que comienza en la l√≠nea $start_line"
            fi
        fi
    done
done

# Verificaci√≥n final
if [ $has_errors -eq 1 ]; then
    exit_with_error "Se encontraron errores en la documentaci√≥n PHPDoc. Corrige los problemas antes de hacer push."
fi

log_message "‚úÖ Validaci√≥n exitosa. Continuando con el push."
exit 0