#!/bin/bash
# ───────────────────────────────────────────────
# 📄 VALIDACIÓN DE DOCUMENTACIÓN PHPDOC
# ───────────────────────────────────────────────
echo "🔍 Iniciando validación PHPDoc con PHPCS..."
echo "📅 Fecha: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
echo "👤 Usuario: $USER"

# Obtener el hash del último commit local y remoto
local_commit=$(git rev-parse HEAD)
remote_commit=$(git rev-parse @{u} 2>/dev/null || git hash-object -t tree /dev/null)

# Obtener archivos PHP modificados
FILES=$(git diff --name-only $remote_commit $local_commit | grep -E '\.php$')

# Si no hay archivos PHP modificados, no hacemos nada
if [ -z "$FILES" ]; then
    echo "✅ No hay archivos PHP modificados para validar."
    exit 0
fi

# Flag de errores
ERROR=0

# Función para validar un bloque de código
validate_code_block() {
    local temp_file=$1
    local line_number=$2
    local file_name=$3

    # Ejecutar phpcs y capturar tanto la salida como el código de retorno
    PHPCS_OUTPUT=$(vendor/bin/phpcs --standard=phpcs.xml "$temp_file" 2>&1)
    PHPCS_STATUS=$?

    echo "Validando bloque en $file_name:$line_number"
    echo "$PHPCS_OUTPUT"

    if [ $PHPCS_STATUS -ne 0 ]; then
        echo "❌ Error de validación en $file_name:$line_number"
        echo "$PHPCS_OUTPUT"
        return 1
    fi
    return 0
}

# Verificar cada archivo PHP modificado
for FILE in $FILES; do
    if git show $local_commit:"$FILE" > /dev/null 2>&1; then
        echo "📂 Validando $FILE ..."
        echo "───────────────────────────────────────────────"
        
        # Crear archivo temporal para el código modificado
        TEMP_FILE=$(mktemp)
        echo "<?php" > "$TEMP_FILE"

        # Obtener el contenido actual del archivo
        CONTENT=$(git show $local_commit:"$FILE")

        # Obtener los hunks modificados
        git diff -U0 $remote_commit $local_commit -- "$FILE" | while read -r line; do
            if [[ $line =~ ^@@ ]]; then
                # Extraer números de línea del hunk
                if [[ $line =~ \+([0-9]+) ]]; then
                    start_line="${BASH_REMATCH[1]}"
                    
                    # Buscar inicio de la función/método
                    func_start=$start_line
                    while [ $func_start -gt 1 ]; do
                        prev_line=$(echo "$CONTENT" | sed "${func_start}q;d")
                        if [[ $prev_line =~ ^\s*(/\*\*|class|function) ]]; then
                            break
                        fi
                        func_start=$((func_start - 1))
                    done

                    # Buscar final de la función/método
                    func_end=$start_line
                    while true; do
                        next_line=$(echo "$CONTENT" | sed "${func_end}q;d")
                        if [[ $next_line =~ ^\s*} ]] || [ -z "$next_line" ]; then
                            break
                        fi
                        func_end=$((func_end + 1))
                    done

                    # Extraer el bloque completo
                    echo "$CONTENT" | sed -n "${func_start},${func_end}p" > "$TEMP_FILE"

                    # Validar el bloque
                    if ! validate_code_block "$TEMP_FILE" "$start_line" "$FILE"; then
                        ERROR=1
                        echo "❌ Error encontrado en $FILE cerca de la línea $start_line"
                        echo "───────────────────────────────────────────────"
                        cat "$TEMP_FILE"
                        echo "───────────────────────────────────────────────"
                    fi
                fi
            fi
        done

        rm -f "$TEMP_FILE"
    else
        echo "⚠️ Archivo omitido (no existe): $FILE"
    fi
done

if [ $ERROR -ne 0 ]; then
    echo "❌ Se encontraron errores en la documentación PHPDoc. Por favor, corrige los problemas antes de hacer push."
    exit 1
fi

echo "✅ Validación exitosa. Continuando con el push."
exit 0