#!/bin/bash

# === VALIDACI√ìN DE NOMBRE DE RAMA ===
# Define los patrones permitidos


# Obt√©n el nombre de la rama actual
branch_name=$(git rev-parse --abbrev-ref HEAD)

# Verifica si el nombre de la rama coincide con alguno de los patrones permitidos

# === VALIDACI√ìN DE C√ìDIGO PHP ===
echo "üîç Ejecutando validaci√≥n PHPDoc con PHPCS..."

# Obtener la rama actual
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
BASE_BRANCH="origin/$CURRENT_BRANCH"

# Flag de errores
ERROR=0

# Obtener archivos PHP modificados
FILES=$(git diff --cached --name-only "$BASE_BRANCH" | grep -E '\.php$')

# Si no hay archivos PHP modificados, no hacemos nada
if [ -z "$FILES" ]; then
    echo "‚úÖ No hay archivos PHP modificados para validar."
    echo "‚úÖ Validaci√≥n exitosa. Continuando con el push."
    exit 0
fi

for FILE in $FILES; do
    if [ -f "$FILE" ]; then
        echo "üìÇ Validando $FILE ..."

        # Crear un archivo diff para los cambios en este archivo
        DIFF_OUTPUT=$(git diff -U0 "$BASE_BRANCH" -- "$FILE")

        if [ -z "$DIFF_OUTPUT" ]; then
            echo "‚ö†Ô∏è No hay cambios detectados en $FILE"
            continue
        fi

        # Usar una tuber√≠a de comandos para enviar el diff a PHPCS
        echo "$DIFF_OUTPUT" | vendor/bin/phpcs --standard=phpcs.xml --report=full --stdin-path="$FILE" --file-list="$FILE" --diff

        if [ $? -ne 0 ]; then
            ERROR=1
        fi
    else
        echo "‚ö†Ô∏è Archivo omitido (no existe): $FILE"
    fi
done

# Si hay errores, cancelar el push
if [ $ERROR -ne 0 ]; then
    echo "‚ùå Se encontraron errores en la documentaci√≥n PHPDoc. Corrige antes de hacer push."
    exit 1
fi

echo "‚úÖ Validaci√≥n exitosa. Continuando con el push."
exit 0