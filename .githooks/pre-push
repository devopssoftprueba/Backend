#!/bin/bash
# ───────────────────────────────────────────────
# 📄 VALIDACIÓN DE DOCUMENTACIÓN PHPDOC
# ───────────────────────────────────────────────
echo "🔍 Ejecutando validación PHPDoc con PHPCS..."

# Obtener el hash del último commit local y remoto
local_commit=$(git rev-parse HEAD)
remote_commit=$(git rev-parse @{u} 2>/dev/null || git hash-object -t tree /dev/null)

# Obtener archivos PHP modificados
FILES=$(git diff --name-only $remote_commit $local_commit | grep -E '\.php$')

# Si no hay archivos PHP modificados, no hacemos nada
if [ -z "$FILES" ]; then
    echo "✅ No hay archivos PHP modificados para validar."
    exit 0
fi

# Flag de errores
ERROR=0

# Función para extraer una función/método modificado
extract_modified_function() {
    local file=$1
    local start_line=$2
    local content=$3
    
    # Buscar hacia arriba hasta encontrar el inicio de la función/clase
    local declaration_start=$start_line
    while [ $declaration_start -gt 1 ]; do
        local line=$(echo "$content" | sed "${declaration_start}q;d")
        if [[ $line =~ ^[[:space:]]*(public|private|protected|function|class)[[:space:]]+ ]]; then
            break
        fi
        declaration_start=$((declaration_start - 1))
    done
    
    # Buscar hacia abajo hasta encontrar el final de la función (})
    local declaration_end=$start_line
    local content_lines=$(echo "$content" | wc -l)
    while [ $declaration_end -lt $content_lines ]; do
        local line=$(echo "$content" | sed "${declaration_end}q;d")
        if [[ $line =~ ^[[:space:]]*} ]]; then
            break
        fi
        declaration_end=$((declaration_end + 1))
    done
    
    # Extraer la función completa incluyendo su documentación
    local doc_start=$declaration_start
    while [ $doc_start -gt 1 ]; do
        local line=$(echo "$content" | sed "${doc_start}q;d")
        if [[ $line =~ ^[[:space:]]*(/\*\*|\*|/\*) ]]; then
            doc_start=$((doc_start - 1))
        else
            doc_start=$((doc_start + 1))
            break
        fi
    done
    
    echo "$content" | sed -n "${doc_start},${declaration_end}p"
}

# Verificar cada archivo PHP modificado
for FILE in $FILES; do
    if git show $local_commit:"$FILE" > /dev/null 2>&1; then
        echo "📂 Validando $FILE ..."
        echo "───────────────────────────────────────────────"
        
        # Obtener las líneas modificadas
        TEMP_FILE=$(mktemp)
        CONTENT=$(git show $local_commit:"$FILE")
        
        # Obtener las líneas modificadas con número de línea
        git diff -U0 $remote_commit $local_commit -- "$FILE" | grep -E "^@@" | while read -r line; do
            # Extraer el número de línea del cambio
            if [[ $line =~ \+([0-9]+) ]]; then
                line_number="${BASH_REMATCH[1]}"
                
                # Extraer la función/método modificado
                modified_function=$(extract_modified_function "$FILE" "$line_number" "$CONTENT")
                
                if [ ! -z "$modified_function" ]; then
                    echo "🔍 Validando función/método modificado en línea $line_number"
                    echo "$modified_function" > "$TEMP_FILE"
                    
                    # Validar solo esta función
                    PHPCS_OUTPUT=$(vendor/bin/phpcs --standard=phpcs.xml "$TEMP_FILE" 2>&1)
                    PHPCS_STATUS=$?
                    
                    if [ $PHPCS_STATUS -ne 0 ]; then
                        echo "❌ Se encontraron problemas en la documentación:"
                        echo "$PHPCS_OUTPUT"
                        ERROR=1
                    else
                        echo "✅ La documentación cumple con los estándares."
                    fi
                    echo "───────────────────────────────────────────────"
                fi
            fi
        done
        
        # Limpiar archivo temporal
        rm -f "$TEMP_FILE"
    else
        echo "⚠️ Archivo omitido (no existe): $FILE"
    fi
done

# Si hay errores, cancelar el push
if [ $ERROR -ne 0 ]; then
    echo "❌ Se encontraron errores en la documentación PHPDoc. Corrige antes de hacer push."
    exit 1
fi

echo "✅ Validación exitosa. Continuando con el push."
exit 0