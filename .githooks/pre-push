#!/bin/bash

set -e  # Salir inmediatamente si ocurre un error
set -o pipefail  # Fallar si un comando dentro de un pipe falla

# Configurar limpieza de archivos temporales al finalizar el script
TEMP_DIR=$(mktemp -d)
ERROR_FILE=$(mktemp)

cleanup() {
    rm -rf "$TEMP_DIR" "$ERROR_FILE"
}
trap cleanup EXIT

# Contin√∫a con la validaci√≥n de PHPDoc
echo "üîç Iniciando validaci√≥n PHPDoc con PHPCS..."
echo "üìÖ Fecha: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
echo "üë§ Usuario: $(git config user.name)"

# Obtener el hash del √∫ltimo commit local y remoto
echo "üîç Obteniendo commits locales y remotos..."
local_commit=$(git rev-parse HEAD)
remote_commit=$(git rev-parse @{u} 2>/dev/null || git hash-object -t tree /dev/null)

echo "üîç Commit local: $local_commit"
echo "üîç Commit remoto: $remote_commit"

# Funci√≥n para validar una funci√≥n espec√≠fica
validate_function() {
    local file=$1
    local start_line=$2
    local end_line=$3
    local content=$4
    local temp_file="${TEMP_DIR}/temp.php"
    local line_offset=$((start_line - 2))  # -2 por el <?php y la funci√≥n

    # Crear archivo temporal con solo la funci√≥n a validar
    echo "<?php" > "$temp_file"
    echo "$content" | sed -n "${start_line},${end_line}p" >> "$temp_file"

    echo "Validando funci√≥n (l√≠neas $start_line-$end_line)..."
    if ! phpcs_output=$(vendor/bin/phpcs --standard=phpcs.xml "$temp_file" 2>&1); then
        echo "$phpcs_output"
        echo "‚ùå Error de documentaci√≥n en la funci√≥n"
        echo "1" > "$ERROR_FILE"
        return 1
    fi

    return 0
}

# Procesar archivos modificados
git diff --name-only $remote_commit $local_commit | grep -E '\.php$' | while read -r file; do
    if [ ! -f "$file" ]; then
        echo "‚ÑπÔ∏è Archivo eliminado o no encontrado: $file. Ignorando..."
        continue
    fi

    echo "üìÇ Analizando $file..."
    content=$(git show $local_commit:"$file")

    git diff -U0 $remote_commit $local_commit -- "$file" | grep -E '^@@' | while read -r hunk; do
        if [[ $hunk =~ \+([0-9]+)(,[0-9]+)? ]]; then
            modified_line=${BASH_REMATCH[1]}
            range=$(find_function_range "$file" "$modified_line" "$content")
            start_line=$(echo $range | cut -d' ' -f1)
            end_line=$(echo $range | cut -d' ' -f2)

            if ! validate_function "$file" "$start_line" "$end_line" "$content"; then
                exit 1
            fi
        fi
    done
done

ERROR=$(cat "$ERROR_FILE")

if [ "$ERROR" -ne 0 ]; then
    echo "‚ùå Se encontraron errores en la documentaci√≥n PHPDoc. Corrige los problemas antes de hacer push."
    exit 1
fi

echo "‚úÖ Validaci√≥n exitosa. Continuando con el push."
exit 0