#!/bin/bash

# Configuraci√≥n inicial
echo "üîç Iniciando validaci√≥n incremental con PHP-Parser y PHPCS..."
ERROR_FILE=$(mktemp)
echo "0" > "$ERROR_FILE"

# Obtener los commits local y remoto
local_commit=$(git rev-parse HEAD)
remote_commit=$(git rev-parse @{u} 2>/dev/null || git hash-object -t tree /dev/null)

# Validar un archivo PHP
validate_php_file() {
    local file=$1
    local modified_lines=$2

    # Llamar al script analyze_changes.php
    php analyze_changes.php "$file" "$modified_lines" || echo "‚ùå Error al analizar $file"
}

# Identificar archivos modificados
git diff --name-only $remote_commit $local_commit | grep -E '\.php$' | while read -r file; do
    if [ ! -f "$file" ]; then
        echo "‚ÑπÔ∏è Archivo eliminado o no encontrado: $file. Ignorando..."
        continue
    fi

    echo "üìÇ Analizando archivo PHP: $file"

    # Obtener las l√≠neas modificadas
    modified_lines=$(git diff -U0 $remote_commit $local_commit -- "$file" | grep -E '^@@' | awk '{print $2}' | cut -d',' -f1 | sed 's/[^0-9]//g')

    # Validar el archivo con el script analyze_changes.php
    validate_php_file "$file" "$modified_lines"
done

# Leer el estado de error
ERROR=$(cat "$ERROR_FILE")

# Limpiar archivos temporales
rm -f "$ERROR_FILE"

# Verificar si hubo errores
if [ "$ERROR" -ne 0 ]; then
    echo "‚ùå Se encontraron errores en la validaci√≥n. Corrige los problemas antes de hacer push."
    exit 1
fi

echo "‚úÖ Validaci√≥n exitosa. Continuando con el push."
exit 0