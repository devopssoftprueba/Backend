#!/bin/bash

# === VALIDACI√ìN DE NOMBRE DE RAMA ===
# Define los patrones permitidos

# Obt√©n el nombre de la rama actual
branch_name=$(git rev-parse --abbrev-ref HEAD)

# Verifica si el nombre de la rama coincide con alguno de los patrones permitidos

# === VALIDACI√ìN DE C√ìDIGO PHP ===
echo "üîç Ejecutando validaci√≥n PHPDoc con PHPCS (solo l√≠neas modificadas)..."

# Obtener la rama actual
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
BASE_BRANCH="origin/$CURRENT_BRANCH"

# Flag de errores
ERROR=0

# Crear un directorio temporal para los archivos
TEMP_DIR=$(mktemp -d)
trap 'rm -rf "$TEMP_DIR"' EXIT

# Obtener archivos PHP modificados
FILES=$(git diff --cached --name-only "$BASE_BRANCH" | grep -E '\.php$')

# Si no hay archivos PHP modificados, no hacemos nada
if [ -z "$FILES" ]; then
    echo "‚úÖ No hay archivos PHP modificados para validar."
    echo "‚úÖ Validaci√≥n exitosa. Continuando con el push."
    exit 0
fi

# Verificar cada archivo PHP modificado
for FILE in $FILES; do
    if [ -f "$FILE" ]; then
        echo "üìÇ Validando cambios en $FILE ..."

        # Crear un archivo de parches con los cambios
        git diff -U0 "$BASE_BRANCH" -- "$FILE" > "$TEMP_DIR/changes.patch"

        # Si no hay cambios en el archivo, continuar con el siguiente
        if [ ! -s "$TEMP_DIR/changes.patch" ]; then
            echo "‚ö†Ô∏è No se detectaron cambios en $FILE"
            continue
        fi

        # Extraer solo los n√∫meros de l√≠nea modificados usando grep y awk
        CHANGED_LINES=$(grep -E "^@@" "$TEMP_DIR/changes.patch" | awk -F' ' '{print $3}' | sed 's/+//' | awk -F, '{print $1}')

        # Si no se pudieron identificar l√≠neas cambiadas, verificar el archivo completo
        if [ -z "$CHANGED_LINES" ]; then
            echo "‚ö†Ô∏è No se pudieron determinar las l√≠neas modificadas en $FILE, verificando archivo completo..."
            vendor/bin/phpcs --standard=phpcs.xml "$FILE"
            if [ $? -ne 0 ]; then
                ERROR=1
            fi
            continue
        fi

        # Crear un conjunto de rangos de l√≠neas para phpcs
        RANGES=""
        for LINE in $CHANGED_LINES; do
            # Convertir el n√∫mero de l√≠nea en un rango para phpcs (l√≠nea actual + 5 l√≠neas para contexto)
            START=$((LINE > 5 ? LINE - 5 : 1))
            END=$((LINE + 5))
            RANGES="$RANGES$START-$END,"
        done
        RANGES=${RANGES%,}  # Eliminar la √∫ltima coma

        # Ejecutar phpcs solo en las l√≠neas modificadas usando --lines
        vendor/bin/phpcs --standard=phpcs.xml --report=full --lines="$RANGES" "$FILE"

        if [ $? -ne 0 ]; then
            ERROR=1
        fi
    else
        echo "‚ö†Ô∏è Archivo omitido (no existe): $FILE"
    fi
done

# Si hay errores, cancelar el push
if [ $ERROR -ne 0 ]; then
    echo "‚ùå Se encontraron errores en la documentaci√≥n PHPDoc. Corrige antes de hacer push."
    exit 1
fi

echo "‚úÖ Validaci√≥n exitosa. Continuando con el push."
exit 0